<?php

namespace Drupal\chat_livehelperchat\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Class LiveHelperChatFormSettings.
 *
 * @category LiveHelperChat_Class
 * @package Drupal\chat_livehelperchat\Form
 * @license https://opensource.org/licenses/MIT MIT License
 * @link http://localhost/
 */
class LiveHelperChatFormSettings extends ConfigFormBase {

  /**
   * Drupal\Core\Database\Driver\mysql\Connection definition.
   *
   * @var \Drupal\Core\Database\Driver\mysql\Connection
   */
  protected $database;

  /**
   * Drupal\Core\Routing\CurrentRouteMatch definition.
   *
   * @var \Drupal\Core\Routing\CurrentRouteMatch
   */
  protected $currentRouteMatch;

  /**
   * Drupal\Core\Session\AccountProxyInterface definition.
   *
   * @var \Drupal\Core\Session\AccountProxyInterface
   */
  protected $currentUser;

  /**
   * Drupal\Core\Entity\EntityManagerInterface definition.
   *
   * @var \Drupal\Core\Entity\EntityManagerInterface
   */
  protected $entityManager;

  /**
   * {@inheritdoc}
   *
   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
   *   Container.
   *
   * @return \Drupal\Core\Form\ConfigFormBase
   *   Return ConfigFormBase.
   */
  public static function create(ContainerInterface $container) {
    $instance = parent::create($container);
    $instance->database = $container->get('database');
    $instance->currentRouteMatch = $container->get('current_route_match');
    $instance->currentUser = $container->get('current_user');
    $instance->entityManager = $container->get('entity_type.manager');
    return $instance;
  }

  /**
   * {@inheritdoc}
   *
   * @return array
   *   Return array Name Config.
   */
  protected function getEditableConfigNames() {
    return [
      'chat_livehelperchat.livehelperchatformsettings',
    ];
  }

  /**
   * {@inheritdoc}
   *
   * @return string
   *   Return Form ID.
   */
  public function getFormId() {
    return 'live_helper_chat_form_settings';
  }

  /**
   * Function buildForm.
   *
   * @param array $form
   *   Form parameter.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   Form State parameter.
   *
   * @return array
   *   Return the build Form.
   */
  public function buildForm(array $form, FormStateInterface $form_state) {

    $currentUser = $this->currentUser;
    $config = $this->config('chat_livehelperchat.livehelperchatformsettings');

    $form['#attached']['library'][] = 'chat_livehelperchat/ace-editor';
    $form['clhc_type_settings'] = [
      '#type' => 'radios',
      '#title' => $this->t('Specify the type of chat settings.'),
      '#options' => [
        '0' => $this->t('Configure Live Helper Chat visually by administration.'),
        '1' => $this->t('Configure Live Helper Chat using JS script generated by chat server in https://demo.livehelperchat.com/site_admin/system/htmlcode#!#design'),
      ],
      '#default_value' => $config->get('clhc_type_settings'),
      '#required' => TRUE,
    ];

    /* Option 1: Configure LiveHelperChat visually by administration. */

    $form['chat_livehelperchat'] = [
      '#type' => 'vertical_tabs',
      '#states' => [
        'visible' => [
          ':input[name="clhc_type_settings"]' => ['value' => 0],
        ],
      ],
    ];

    $form['account'] = [
      '#type' => 'details',
      '#title' => $this->t('General settings'),
      '#collapsible' => FALSE,
      '#group' => 'chat_livehelperchat',
    ];
    $form['account']['clhc_url'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Live Helper Chat base URL'),
      '#default_value' => $config->get('clhc_url'),
      '#size' => 40,
      '#maxlength' => 40,
      '#required' => TRUE,
      '#description' => $this->t('The URL should not contain protocol or the tailing slash. Ie. for https://demo.livehelperchat.com use demo.livehelperchat.com'),
    ];

    $form['widget_chat'] = [
      '#type' => 'details',
      '#title' => $this->t('Widget settings chat'),
      '#collapsible' => FALSE,
      '#group' => 'chat_livehelperchat',
    ];
    $form['widget_chat']['clhc_widget_height'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Widget height'),
      '#default_value' => $config->get('clhc_widget_height'),
    ];
    $form['widget_chat']['clhc_widget_width'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Widget width'),
      '#default_value' => $config->get('clhc_widget_width'),
    ];
    $form['widget_chat']['clhc_popup_height'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Popup height'),
      '#default_value' => $config->get('clhc_popup_height'),
    ];
    $form['widget_chat']['clhc_popup_width'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Popup width'),
      '#default_value' => $config->get('clhc_popup_width'),
    ];
    $form['widget_chat']['clhc_position_fromtop'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Position from top'),
      '#description' => $this->t('Only used if position Middle left or the Middle right side is chosen'),
      '#default_value' => $config->get('clhc_position_fromtop'),
    ];
    $form['widget_chat']['clhc_position_unit'] = [
      '#type' => 'select',
      '#title' => $this->t('Position from top unit'),
      '#description' => $this->t('Only used if position Middle left or the Middle right side is chosen'),
      '#default_value' => $config->get('clhc_position_unit'),
      '#options' => [
        'pixels' => $this->t('Pixels'),
        'percents' => $this->t('Percents'),
      ],
    ];
    $form['widget_chat']['clhc_click_internal'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('On a mouse click show the page widget'),
      '#default_value' => $config->get('clhc_click_internal'),
    ];
    $form['widget_chat']['clhc_check_messages'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Check automatically for messages from the operator'),
      '#default_value' => $config->get('clhc_check_messages'),
    ];
    $form['widget_chat']['clhc_disable_proactive'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Disable pro active invitations'),
      '#default_value' => $config->get('clhc_disable_proactive'),
    ];
    $form['widget_chat']['clhc_hide_offline'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Hide when operator is offline'),
      '#default_value' => $config->get('clhc_hide_offline'),
    ];
    $form['widget_chat']['clhc_offline_leavemessage'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Show a leave message form when operator is offline'),
      '#default_value' => $config->get('clhc_offline_leavemessage'),
    ];
    $form['widget_chat']['clhc_nonresponsive_widget'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Disable responsive layout of the status widget'),
      '#default_value' => $config->get('clhc_nonresponsive_widget'),
    ];
    $form['widget_chat']['clhc_chat_http_mode'] = [
      '#type' => 'select',
      '#title' => $this->t('Choose prefered http mode'),
      '#options' => [
        '' => $this->t('Based on site (default)'),
        'http:' => $this->t('http:'),
        'https:' => $this->t('https:'),
      ],
      '#default_value' => $config->get('clhc_chat_http_mode'),
    ];
    $form['widget_chat']['clhc_domain'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Domain'),
      '#description' => $this->t('For what domain you are generating embed code?'),
      '#default_value' => $config->get('clhc_domain'),
    ];
    $form['widget_chat']['clhc_department'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Department ID'),
      '#default_value' => $config->get('clhc_department'),
    ];
    $form['widget_chat']['clhc_theme'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Theme'),
      '#default_value' => $config->get('clhc_theme'),
      '#description' => $this->t('Leave empty for default option.'),
    ];
    $form['widget_chat']['clhc_identifier'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Chat identifier'),
      '#default_value' => $config->get('clhc_identifier'),
    ];
    $form['widget_chat']['clhc_minimize_action'] = [
      '#type' => 'select',
      '#title' => $this->t('Minimize action'),
      '#description' => $this->t('Applies only if status widget is at the bottom'),
      '#options' => [
        'keep' => $this->t('Keep where it was'),
        'minimize' => $this->t('Minimize to the bottom of the screen'),
      ],
      '#default_value' => $config->get('clhc_minimize_action'),
    ];
    $form['widget_chat']['clhc_position'] = [
      '#type' => 'select',
      '#title' => $this->t('Position'),
      '#options' => [
        'bottom_right' => $this->t('Bottom right corner of the screen'),
        'bottom_left' => $this->t('Bottom left corner of the screen'),
        'middle_right' => $this->t('Middle right side of the screen'),
        'middle_left' => $this->t('Middle left side of the screen'),
        'api' => $this->t('Invisible, only JS API will be included'),
      ],
      '#default_value' => $config->get('clhc_position'),
    ];

    $form['widget_faq'] = [
      '#type' => 'details',
      '#title' => $this->t('Widget settings FAQ'),
      '#collapsible' => FALSE,
      '#group' => 'chat_livehelperchat',
    ];
    $form['widget_faq']['clhc_widget_faq_active'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Active Widget/Module FAQ'),
      '#default_value' => $config->get('clhc_widget_faq_active'),
    ];
    $form['widget_faq']['clhc_faq_text'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Status text'),
      '#default_value' => $config->get('clhc_faq_text'),
      "#states" => [
        "required" => [
          ':input[name="clhc_type_settings"]' => ["value" => 0],
          ':input[name="clhc_widget_faq_active"]' => ["checked" => TRUE],
        ],
      ],
    ];
    $form['widget_faq']['clhc_faq_theme'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Theme'),
      '#default_value' => $config->get('clhc_faq_theme'),
      '#description' => $this->t('Leave empty for default option.'),
    ];
    $form['widget_faq']['clhc_faq_position_fromtop'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Position from top'),
      '#description' => $this->t('Position from the top, only used if the Middle left or the Middle right side is chosen.'),
      '#default_value' => $config->get('clhc_faq_position_fromtop'),
    ];
    $form['widget_faq']['clhc_faq_position_unit'] = [
      '#type' => 'select',
      '#title' => $this->t('Position from top unit'),
      '#description' => $this->t('Only used if the Middle left or the Middle right side is chosen.'),
      '#default_value' => $config->get('clhc_faq_position_unit'),
      '#options' => [
        'pixels' => $this->t('Pixels'),
        'percents' => $this->t('Percents'),
      ],
    ];
    $form['widget_faq']['clhc_faq_position'] = [
      '#type' => 'select',
      '#title' => $this->t('Position'),
      '#options' => [
        'bottom_right' => $this->t('Bottom right corner of the screen'),
        'bottom_left' => $this->t('Bottom left corner of the screen'),
        'middle_right' => $this->t('Middle right side of the screen'),
        'middle_left' => $this->t('Middle left side of the screen'),
      ],
      '#default_value' => $config->get('clhc_faq_position'),
    ];
    $form['widget_faq']['clhc_faq_http_mode'] = [
      '#type' => 'select',
      '#title' => $this->t('Choose prefered http mode'),
      '#options' => [
        '' => $this->t('Based on site (default)'),
        'http:' => $this->t('http:'),
        'https:' => $this->t('https:'),
      ],
      '#default_value' => $config->get('clhc_faq_http_mode'),
    ];
    $form['widget_faq']['clhc_faq_nonresponsive_widget'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Disable responsive layout for status widget.'),
      '#default_value' => $config->get('clhc_faq_nonresponsive_widget'),
    ];

    /* Option 2: Configure LiveHelperChat using JS script generated by chat server in https://demo.livehelperchat.com/site_admin/system/htmlcode#!#design. */

    $form['livehelperchat_codejs'] = [
      '#type' => 'vertical_tabs',
      '#states' => [
        'visible' => [
          ':input[name="clhc_type_settings"]' => ['value' => 1],
        ],
      ],
    ];

    $allow_injectjs = $currentUser->hasPermission('use injectjs server config for chat_livehelperchat');

    if ($allow_injectjs) {
      $form['details_clhc_script_codejs'] = [
        '#type' => 'details',
        '#title' => $this->t('Settings'),
        '#collapsible' => FALSE,
        '#group' => 'livehelperchat_codejs',
      ];
      $form['details_clhc_script_codejs']['clhc_script_codejs'] = [
        '#type' => 'textarea',
        '#title' => $this->t('Code JS'),
        '#default_value' => $config->get('clhc_script_codejs'),
        '#rows' => 17,
        '#attributes' => ['data-ace-mode' => "javascript"],
        '#prefix' => '<div>',
        '#suffix' => '<div class="resizable"><div class="ace-editor"></div></div></div>',
        "#states" => [
          "required" => [
            ':input[name="clhc_type_settings"]' => ["value" => 1],
          ],
          "visible" => [
            ':input[name="clhc_type_settings"]' => ["value" => 1],
          ],
        ],
        '#description' => $this->t("Enter the JS code generated at https://demo.livehelperchat.com/site_admin/system/htmlcode#!#design without the <script> </script> tags."),
      ];
    }
    /* General chat visibility settings  */
    $form['clhc_visibility_config'] = [
      '#type' => 'vertical_tabs',
      '#title' => $this->t("General visibility settings"),
    ];
    $form['role_vis_settings'] = [
      '#type' => 'details',
      '#title' => $this->t('Roles'),
      '#collapsible' => TRUE,
      '#group' => 'clhc_visibility_config',
    ];

    $roles = user_roles();
    $role_options = [];
    foreach ($roles as $rid => $name) {
      $role_options[$rid] = $name->get('label');
    }
    $form['role_vis_settings']['clhc_roles'] = [
      '#type' => 'checkboxes',
      '#title' => $this->t('Remove script for specific roles'),
      '#default_value' => empty($config->get('clhc_roles')) ? [] : $config->get('clhc_roles'),
      '#options' => $role_options,
      '#description' => $this->t('Remove script only for the selected role(s). If none of the roles are selected, all roles will have the script. Otherwise, any roles selected here will NOT have the script.'),
    ];

    $form['content_type_vis_settings'] = [
      '#type' => 'details',
      '#title' => $this->t('Content type'),
      '#collapsible' => TRUE,
      '#group' => 'clhc_visibility_config',
    ];

    $content_type_options = chat_livehelperchat_list_content_type(FALSE);
    $form['content_type_vis_settings']['clhc_content_type'] = [
      '#type' => 'checkboxes',
      '#title' => $this->t('Remove script for specific content type'),
      '#default_value' => empty($config->get('clhc_content_type')) ? [] : $config->get('clhc_content_type'),
      '#options' => $content_type_options,
      '#description' => $this->t('Remove script only for the selected content type. If none of the content type are selected, all content type will have the script. Otherwise, any content type selected here will NOT have the script.'),
    ];
    $form['page_vis_settings'] = [
      '#type' => 'details',
      '#title' => $this->t('Pages'),
      '#collapsible' => TRUE,
      '#group' => 'clhc_visibility_config',
    ];

    $access = $currentUser->hasPermission('use PHP for livehelperchat visibility');
    $visibility = $config->get('clhc_visibility');
    $pages = $config->get('clhc_pages');
    if ($visibility == 2 && !$access) {
      $form['page_vis_settings'] = [];
      $form['page_vis_settings']['visibility'] = ['#type' => 'value', '#value' => 2];
      $form['page_vis_settings']['pages'] = ['#type' => 'value', '#value' => $pages];
    }
    else {
      $options = [$this->t('Add to every page except the listed pages.'), $this->t('Add to the listed pages only.')];
      $description = $this->t("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", [
        '%blog' => 'blog',
        '%blog-wildcard' => 'blog/*',
        '%front' => '<front>',
      ]);
      if ($access) {
        $options[] = $this->t('Add if the following PHP code returns <code>TRUE</code> (PHP-mode, experts only).');
        $description .= ' ' . $this->t('If the PHP-mode is chosen, enter PHP code between %php tags. The module <a href=":link">PHP</a> es required for this option. Note that executing incorrect PHP-code can break your Drupal site.', ['%php' => '<?php ?>', ':link' => "https://www.drupal.org/project/php"]);
      }
      $form['page_vis_settings']['clhc_visibility'] = [
        '#type' => 'radios',
        '#title' => $this->t('Add script to specific pages'),
        '#options' => $options,
        '#default_value' => $visibility,
      ];
      $form['page_vis_settings']['clhc_pages'] = [
        '#type' => 'textarea',
        '#title' => $this->t('Pages'),
        '#default_value' => (empty($pages)) ? "" : implode("\n", $pages),
        '#description' => $description,
        '#wysiwyg' => FALSE,
      ];
    }
    return parent::buildForm($form, $form_state);
  }

  /**
   * Implements \Drupal\Core\Form\FormInterface::validateForm().
   *
   * @param array $form
   *   Form Parameter.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   Form State parameter.
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {

  }

  /**
   * {@inheritdoc}
   *
   * @param array $form
   *   Form parameter.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   Form State parameter.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    parent::submitForm($form, $form_state);

    $clhc_pages = $form_state->getValue('clhc_pages');
    $clhc_pages = (!empty($clhc_pages)) ? explode("\n", $clhc_pages) : [];
    $allow_injectjs = $this->currentUser->hasPermission('use injectjs server config for chat_livehelperchat');
    $config = $this->config('chat_livehelperchat.livehelperchatformsettings');
    if ($allow_injectjs) {
      $clhc_script_codejs = $form_state->getValue('clhc_script_codejs');
    }
    else {
      $clhc_script_codejs = $config->get('clhc_script_codejs');
    }
    $this->config('chat_livehelperchat.livehelperchatformsettings')
      ->set('clhc_type_settings', $form_state->getValue('clhc_type_settings'))
      ->set('clhc_url', $form_state->getValue('clhc_url'))
      ->set('clhc_widget_height', $form_state->getValue('clhc_widget_height'))
      ->set('clhc_widget_width', $form_state->getValue('clhc_widget_width'))
      ->set('clhc_popup_height', $form_state->getValue('clhc_popup_height'))
      ->set('clhc_popup_width', $form_state->getValue('clhc_popup_width'))
      ->set('clhc_position_fromtop', $form_state->getValue('clhc_position_fromtop'))
      ->set('clhc_position_unit', $form_state->getValue('clhc_position_unit'))
      ->set('clhc_click_internal', $form_state->getValue('clhc_click_internal'))
      ->set('clhc_check_messages', $form_state->getValue('clhc_check_messages'))
      ->set('clhc_disable_proactive', $form_state->getValue('clhc_disable_proactive'))
      ->set('clhc_hide_offline', $form_state->getValue('clhc_hide_offline'))
      ->set('clhc_offline_leavemessage', $form_state->getValue('clhc_offline_leavemessage'))
      ->set('clhc_nonresponsive_widget', $form_state->getValue('clhc_nonresponsive_widget'))
      ->set('clhc_chat_http_mode', $form_state->getValue('clhc_chat_http_mode'))
      ->set('clhc_domain', $form_state->getValue('clhc_domain'))
      ->set('clhc_department', $form_state->getValue('clhc_department'))
      ->set('clhc_theme', $form_state->getValue('clhc_theme'))
      ->set('clhc_identifier', $form_state->getValue('clhc_identifier'))
      ->set('clhc_minimize_action', $form_state->getValue('clhc_minimize_action'))
      ->set('clhc_position', $form_state->getValue('clhc_position'))
      ->set('clhc_roles', $form_state->getValue('clhc_roles'))
      ->set('clhc_content_type', $form_state->getValue('clhc_content_type'))
      ->set('clhc_visibility', $form_state->getValue('clhc_visibility'))
      ->set('clhc_pages', $clhc_pages)
      ->set('clhc_script_codejs', $clhc_script_codejs)
      ->set('clhc_widget_faq_active', $form_state->getValue('clhc_widget_faq_active'))
      ->set('clhc_faq_text', $form_state->getValue('clhc_faq_text'))
      ->set('clhc_faq_theme', $form_state->getValue('clhc_faq_theme'))
      ->set('clhc_faq_position_fromtop', $form_state->getValue('clhc_faq_position_fromtop'))
      ->set('clhc_faq_position_unit', $form_state->getValue('clhc_faq_position_unit'))
      ->set('clhc_faq_position', $form_state->getValue('clhc_faq_position'))
      ->set('clhc_faq_http_mode', $form_state->getValue('clhc_faq_http_mode'))
      ->set('clhc_faq_nonresponsive_widget', $form_state->getValue('clhc_faq_nonresponsive_widget'))
      ->save();
  }

}
